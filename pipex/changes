void	here_doc(t_pipex *pipex_data)
{
	char	*input;
	char	*delimiter;
	int		fd;

	delimiter = pipex_data->delimiter;
	fd = open(TMP_FILE, O_WRONLY | O_CREAT | O_TRUNC, 0664);
	if (fd == -1)
		return ;
	while (1)
	{
		write(1, ">", 1);
		input = get_next_line(1);
		if (!input || ft_strequals(input, delimiter))
			break ;
		if (write(fd, input, ft_strlen(input)) == -1)
			break ;
		free(input);
		input = NULL;
	}
	close(fd);
	if (input)
		free(input);
	pipex_data->infile = TMP_FILE;
	free(delimiter);
}

pipex_data->delimiter = ft_strjoin(argv[2], "\n");
unlink(TMP_FILE);
void	dup_input(t_pipex *pipex_data, int index)
{
	int	in_fd;

	if (index == 0)
	{
		in_fd = open(pipex_data->infile, O_RDONLY);
		if (in_fd == -1)
		{
			perror(pipex_data->infile);
			exit_pipex(pipex_data, EXIT_FAILURE);
		}
		if (dup2(in_fd, STDIN_FILENO) == -1)
			error("dup2", pipex_data);
		close(in_fd);
	}
	else
	{
		if (dup2(pipex_data->pipe_fds[index - 1][0], STDIN_FILENO) == -1)
			error("dup2", pipex_data);
	}
}

void	dup_output(t_pipex *pipex_data, int index)
{
	int	out_fd;

	if (index == pipex_data->cmd_count - 1)
	{
		if (pipex_data->here_doc)
			out_fd = open(pipex_data->outfile, O_WRONLY | O_CREAT | O_APPEND,
					0664);
		else
			out_fd = open(pipex_data->outfile, O_WRONLY | O_CREAT | O_TRUNC,
					0664);
		if (out_fd == -1)
		{
			perror(pipex_data->outfile);
			exit_pipex(pipex_data, EXIT_FAILURE);
		}
		if (dup2(out_fd, STDOUT_FILENO) == -1)
			error("dup2", pipex_data);
		close(out_fd);
	}
	else
	{
		if (dup2(pipex_data->pipe_fds[index][1], STDOUT_FILENO) == -1)
			error("dup2", pipex_data);
	}
}

